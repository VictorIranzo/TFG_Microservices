Automatically generated by Mendeley Desktop 1.19.1
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@book{Rensin2015,
author = {Rensin, David},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Rensin - 2015 - Kubernetes.pdf:pdf},
publisher = {O'REILLY},
title = {{Kubernetes}},
url = {safaribooksonline.com},
year = {2015}
}
@book{Richards2016,
author = {Richards, Mark},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Richards - 2016 - Microservices AntiPatterns and Pitfalls.pdf:pdf},
publisher = {O'REILLY},
title = {{Microservices AntiPatterns and Pitfalls}},
url = {safaribooksonline.com},
year = {2016}
}
@book{Hunter2017,
abstract = {Teaches you to use the many types of tools required to navigate and maintain a microservice ecosystem. This book examines what is normally a complex system of interconnected services and clarifies them one at a time, first examining theoretical requirements then looking at concrete tools, configuration, and workflows. Building out these systems includes many concerns such as containerization, container orchestration, build pipelines and continuous integration solutions, automated testing, service discovery, logging and analytics. You will examine each of these tools and understand how they can be combined within an organization. You will design an automated build pipeline from Pull Request to container deployment, understand how to achieve High Availability and monitor application health with Service Discovery, and learn how to collaborate with other teams, write documentation, and describe bugs. Covering use of Jenkins, Docker, Kubernetes, the ELK stack (Elasticsearch, Logstash, and Kibana), and StatsD and Grafana for analytics, you will build on your existing knowledge of Service-Oriented Architecture and gain an advanced, practical understanding of everything from infrastructure development to team collaboration. . At a Glance; Contents; About the Author; About the Technical Reviewers; Preface; Chapter 1: Introduction; Why Use Microservices?; Forced Separation of Concerns; Natural Team Ownership; Frequent Deployments; Heterogeneous Selection of Languages; Organization Buy-In; Separation of Concerns; Nouns (Entities); Verbs (Actions/Relationships); Example Microservice Breakdown; Team Structure; Splitting a Monolith; Terminology; Networking Basics; Hostnames and IP Addresses; Network Interfaces; Ports; Protocols; Chapter 2: HTTP API Design; Data Design and Abstraction; Examples of Abstraction Good AbstractionBad Abstraction; Real-World Examples; GitHub: An Ideal Example; Twitter: A Flawed Example; Anatomy of an HTTP Message; Debugging HTTP Traffic; API Entrypoint; Choosing an Entrypoint for a Public API; Content Located at the Root; API Requests; HTTP Methods; URL Endpoints; Top-Level Collections; Specific Endpoints; Filtering Resources; White-Listing Attributes; Filtered Request; Unfiltered Request; Requesting Arrays via URL Parameters; Repeat Parameters; Bracket Notation; Comma Separated; Body Formats; JSON; Form URL Encoded; Multipart Form Data; HTTP Headers; API Responses HTTP Status CodesCommon API Status Codes; Status Code Ranges; 1XX: Informational; 2XX: Successful; 3XX: Redirection; 4XX: Client Error; 5XX: Server Error; Content Types; Expected Body Content; GET /{\{}collection{\}}; GET /{\{}collection{\}}/{\{}resource{\_}id{\}}; POST /{\{}collection{\}}; PUT /{\{}collection{\}}/{\{}resource{\_}id{\}}; PATCH /{\{}collection{\}}/{\{}resource{\_}id{\}}; DELETE /{\{}collection{\}}/{\{}resource{\_}id{\}}; JSON Attribute Conventions; Attribute Name Casing; Snake Case; Pascal Case; Camel Case; Consistency Between Resources; Booleans; Timestamps; ISO 8601; JavaScript Default; Unix Epoch; SQL Timestamp; Resource Identifiers (IDs) NullsArrays; Whitespace; Error Reporting; Validation Errors; Generic Errors; Always Handle Server Errors; String-Based Error Codes; Responses Should Mimic Requests; Acceptable Discrepancy; Avoidable Discrepancy; HTTP Headers; API Standards; Simple Response Envelope; JSON Schema; JSON API; GraphQL; Hypermedia APIs; API Transports; JSON RPC; SOAP; MessagePack (Binary); Apache Thrift (Binary); Chapter 3: Deployments; Automated Testing; Unit Tests; Smoke Tests; Integration Tests; Acceptance Tests; Performance Tests; Regression Tests; Containers; Docker Containers; Dockerfile Breakdown Running a Docker ImageManaging Containers with Kubernetes; Further Reading: Mesos and Marathon; Build Pipeline; Continuous Integration and Deployment; Choosing Environments; Designing a Build Pipeline; Building with Jenkins; Testing Contributions; Jenkins; Travis CI; Further Reading: TeamCity and CircleCI; Chapter 4: Service Discovery; Why Do You Need Service Discovery?; Client Side vs. Server Side; Client-Side Discovery; Server-Side Discovery; Example Implementation; Get Entire State; Register Provider Instance; Deregister Provider Instance; Finding a Provider},
author = {Hunter, Thomas},
booktitle = {Advanced Microservices: A Hands-on Approach to Microservice Infrastructure and Tooling},
doi = {10.1007/978-1-4842-2887-6},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hunter - 2017 - Advanced Microservices A Hands-on Approach to Microservice Infrastructure and Tooling.pdf:pdf},
isbn = {9781484228876},
pages = {1--181},
title = {{Advanced Microservices: A Hands-on Approach to Microservice Infrastructure and Tooling}},
year = {2017}
}
@book{Newman2015a,
abstract = {Distributed systems have become more fine-grained in the past 10 years, shifting from code-heavy monolithic applications to smaller, self-contained microservices. But developing these systems brings its own set of headaches. With lots of examples and practical advice, this book takes a holistic view of the topics that system architects and administrators must consider when building, managing, and evolving microservice architectures.Microservice technologies are moving quickly. Author Sam Newman provides you with a firm grounding in the concepts while diving into current solutions for modeling, integrating, testing, deploying, and monitoring your own autonomous services. You'll follow a fictional company throughout the book to learn how building a microservice architecture affects a single domain.Discover how microservices allow you to align your system design with your organization's goalsLearn options for integrating a service with the rest of your systemTake an incremental approach when splitting monolithic codebasesDeploy individual microservices through continuous integrationExamine the complexities of testing and monitoring distributed servicesManage security with user-to-service and service-to-service modelsUnderstand the challenges of scaling microservice architectures},
archivePrefix = {arXiv},
arxivId = {1606.04036},
author = {Newman, Sam},
booktitle = {O'Reilly},
doi = {10.1109/MS.2016.64},
eprint = {1606.04036},
isbn = {978-1-491-95035-7},
issn = {07407459},
keywords = {www.it-ebooks.info},
pmid = {15003161},
title = {{Building Microservices}},
year = {2015}
}
@book{Martin2017,
abstract = {Building upon the success of best-sellers The Clean Coder and Clean Code, legendary software craftsman Robert C. "Uncle Bob" Martin shows how to bring greater professionalism and discipline to application architecture and design. As with his other books, Martin's Clean Architecture doesn't merely present multiple choices and options, and say "use your best judgment": it tells you what choices to make, and why those choices are critical to your success. Martin offers direct, no-nonsense answers to key architecture and design questions like: What are the best high level structures for different kinds of applications, including web, database, thick-client, console, and embedded apps? What are the core principles of software architecture? What is the role of the architect, and what is he/she really trying to achieve? What are the core principles of software design? How do designs and architectures go wrong, and what can you do about it? What are the disciplines and practices of professional architects and designers? Clean Architecture is essential reading for every software architect, systems analyst, system designer, and software manager -- and for any programmer who aspires to these roles or is impacted by their work.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Martin, Robert C.},
doi = {10.1177/1356389011400889},
eprint = {arXiv:1011.1669v3},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Martin - 2017 - Clean Architecture A Craftsman's Guide to Software Structure and Design.pdf:pdf},
isbn = {978-0134494166},
issn = {13563890},
pages = {428},
pmid = {15991970},
publisher = {Prentice Hall},
title = {{Clean Architecture: A Craftsman's Guide to Software Structure and Design}},
year = {2017}
}
@article{Arsanjani2009a,
abstract = {Tracking the fate of cells in murine epidermis in vivo has revealed that a committed progenitor cell population can maintain normal adult tissue in the long term without support from a long-lived, self-renewing population of stem cells. Here, we argue that these results challenge the dogma that stem-cell proliferation is required for the cellular homeostasis of the epidermis and other adult tissues, with important implications for tissue physiology and disease.},
author = {Arsanjani, Ali and Booch, Grady and Boubez, Toufic and Brown, Paul C. and Chappell, David and DeVadoss, John and {Thomas Erl} and Josuttis, Nicolai and Krafzig, Dirk and Little, Mark and Loesgen, Brian and Manes, Anne Thomas and {Joe McKendrick} and Ross-Talbot, Steve and Tilkov, Stefan and Utschig-Utschig, Clemens and Wilhelmsen, Herbj{\"{o}}rn},
doi = {10.1038/nrm2292},
issn = {14710080},
journal = {SOAManifesto},
pmid = {17987044},
title = {{SOA Manifesto}},
year = {2009}
}
@book{DelaTorre2018,
abstract = {Reservados todos los derechos. No se puede reproducir ni transmitir de ninguna forma, ni por ning{\'{u}}n medio, ninguna parte del contenido de este libro, sin la autorizaci{\'{o}}n por escrito del editor. Este libro se proporciona "tal cual" y expresa los puntos de vista y opiniones de los autores. Los puntos de vista, opiniones e informaci{\'{o}}n expresada en este libro, incluyendo las URL y otras referencias a sitios web de Internet, pueden cambiar sin previo aviso. Algunos ejemplos mostrados aqu{\'{i}} se proporcionan s{\'{o}}lo a t{\'{i}}tulo ilustrativo y son ficticios. No se pretende ni se debe inferir ninguna conexi{\'{o}}n ni asociaciaci{\'{o}}n con la realidad. Microsoft y las marcas que figuran en la p{\'{a}}gina web de "Trademarks" en http://www.microsoft.com, son marcas comerciales del grupo de compa{\~{n}}{\'{i}}as de Microsoft. Mac y macOS son marcas de Apple Inc. El logotipo de la ballena de Docker es una marca registrada de Docker, Inc. Se usa con la autorizaci{\'{o}}n correspondiente. Todas las otras marcas y logotipos son propiedad de sus respectivos due{\~{n}}os.},
author = {{De la Torre}, Cesar and Wagner, Bill and Rousos, Mike},
edition = {2},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/De la Torre, Wagner, Rousos - 2018 - Microservicios .NET Arquitectura para Aplicaciones .NET Contenerizadas.pdf:pdf},
publisher = {Microsoft Corporation},
title = {{Microservicios .NET: Arquitectura para Aplicaciones .NET Contenerizadas}},
year = {2018}
}

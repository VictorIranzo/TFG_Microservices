Automatically generated by Mendeley Desktop 1.19.1
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{Minkowski2018,
annote = {Consultado el d{\'{i}}a 15/08/2018.},
author = {Mi{\'{n}}kowski, Piotr},
booktitle = {DZone},
title = {{Quick Guide to Microservices With Kubernetes, Spring Boot 2.0, and Docker}},
url = {https://dzone.com/articles/quick-guide-to-microservices-with-kubernetes-sprin},
urldate = {2018-09-08},
year = {2018}
}
@book{Osherove2014,
abstract = {2nd ed.},
author = {Osherove, Roy.},
isbn = {1617290890},
publisher = {Manning Publications},
title = {{The art of unit testing : with examples in C Sharp}},
year = {2014}
}
@book{Vaughn2013,
author = {Vernon, Vaughn},
isbn = {978-0-321-83457-7},
pages = {656},
publisher = {Addison-Wesley Professional},
title = {{Implementing Domain-Driven Design}},
year = {2013}
}
@inproceedings{Amaral2016,
abstract = {Microservices architecture has started a new trend for application development for a number of reasons: (1) to reduce complexity by using tiny services; (2) to scale, remove and deploy parts of the system easily; (3) to improve flexibility to use different frameworks and tools; (4) to increase the overall scalability; and (5) to improve the resilience of the system. Containers have empowered the usage of microservices architectures by being lightweight, providing fast start-up times, and having a low overhead. Containers can be used to develop applications based on monolithic architectures where the whole system runs inside a single container or inside a microservices architecture where one or few processes run inside the containers. Two models can be used to implement a microservices architecture using containers: master-slave, or nested-container. The goal of this work is to compare the performance of CPU and network running benchmarks in the two aforementioned models of microservices architecture hence provide a benchmark analysis guidance for system designers.},
archivePrefix = {arXiv},
arxivId = {1511.02043},
author = {Amaral, Marcelo and Polo, Jorda and Carrera, David and Mohomed, Iqbal and Unuvar, Merve and Steinder, Malgorzata},
booktitle = {2015 IEEE 14th International Symposium on Network Computing and Applications},
doi = {10.1109/NCA.2015.49},
eprint = {1511.02043},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/Downloads/PerformanceEvaluation.pdf:pdf},
isbn = {978-1-5090-1849-9},
keywords = {Containers,Microservices,Networking,Performance Evaluation},
month = {sep},
pages = {27--34},
publisher = {IEEE},
title = {{Performance Evaluation of Microservices Architectures Using Containers}},
year = {2015}
}
@misc{Garzas,
annote = {Consultado el d{\'{i}}a 02/09/2018.},
author = {Garz{\'{a}}s, Javier},
title = {{Todo sobre la deuda t{\'{e}}cnica}},
url = {http://www.javiergarzas.com/2012/11/deuda-tecnica-2.html},
urldate = {2018-09-02}
}
@misc{Suter2017,
annote = {Consultado el d{\'{i}}a 29/07/2018.},
author = {Suter, Rico},
booktitle = {YouTube},
title = {{NSwag Tutorial: How to integrate NSwag into your ASP.NET Core Web API project}},
url = {https://www.youtube.com/watch?v=lF9ZZ8p2Ciw},
urldate = {2018-09-08},
year = {2017}
}
@misc{Standard2010,
annote = {Consultado el d{\'{i}}a 24/07/2018.},
title = {{Portal iso25000.com}},
url = {https://iso25000.com/index.php/normas-iso-25000/iso-25010},
urldate = {2018-07-24},
volume = {2010},
year = {2010}
}
@misc{Levesque2017,
annote = {Consultado el d{\'{i}}a 25/07/2018.},
author = {Levesque, Thomas},
booktitle = { Thomas Levesque's .NET blog},
title = {{Common MSBuild properties and items with Directory.Build.props}},
url = {https://www.thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/},
urldate = {2018-09-08},
year = {2017}
}
@book{Hunter2017,
abstract = {Teaches you to use the many types of tools required to navigate and maintain a microservice ecosystem. This book examines what is normally a complex system of interconnected services and clarifies them one at a time, first examining theoretical requirements then looking at concrete tools, configuration, and workflows. Building out these systems includes many concerns such as containerization, container orchestration, build pipelines and continuous integration solutions, automated testing, service discovery, logging and analytics. You will examine each of these tools and understand how they can be combined within an organization. You will design an automated build pipeline from Pull Request to container deployment, understand how to achieve High Availability and monitor application health with Service Discovery, and learn how to collaborate with other teams, write documentation, and describe bugs. Covering use of Jenkins, Docker, Kubernetes, the ELK stack (Elasticsearch, Logstash, and Kibana), and StatsD and Grafana for analytics, you will build on your existing knowledge of Service-Oriented Architecture and gain an advanced, practical understanding of everything from infrastructure development to team collaboration. . At a Glance; Contents; About the Author; About the Technical Reviewers; Preface; Chapter 1: Introduction; Why Use Microservices?; Forced Separation of Concerns; Natural Team Ownership; Frequent Deployments; Heterogeneous Selection of Languages; Organization Buy-In; Separation of Concerns; Nouns (Entities); Verbs (Actions/Relationships); Example Microservice Breakdown; Team Structure; Splitting a Monolith; Terminology; Networking Basics; Hostnames and IP Addresses; Network Interfaces; Ports; Protocols; Chapter 2: HTTP API Design; Data Design and Abstraction; Examples of Abstraction Good AbstractionBad Abstraction; Real-World Examples; GitHub: An Ideal Example; Twitter: A Flawed Example; Anatomy of an HTTP Message; Debugging HTTP Traffic; API Entrypoint; Choosing an Entrypoint for a Public API; Content Located at the Root; API Requests; HTTP Methods; URL Endpoints; Top-Level Collections; Specific Endpoints; Filtering Resources; White-Listing Attributes; Filtered Request; Unfiltered Request; Requesting Arrays via URL Parameters; Repeat Parameters; Bracket Notation; Comma Separated; Body Formats; JSON; Form URL Encoded; Multipart Form Data; HTTP Headers; API Responses HTTP Status CodesCommon API Status Codes; Status Code Ranges; 1XX: Informational; 2XX: Successful; 3XX: Redirection; 4XX: Client Error; 5XX: Server Error; Content Types; Expected Body Content; GET /{\{}collection{\}}; GET /{\{}collection{\}}/{\{}resource{\_}id{\}}; POST /{\{}collection{\}}; PUT /{\{}collection{\}}/{\{}resource{\_}id{\}}; PATCH /{\{}collection{\}}/{\{}resource{\_}id{\}}; DELETE /{\{}collection{\}}/{\{}resource{\_}id{\}}; JSON Attribute Conventions; Attribute Name Casing; Snake Case; Pascal Case; Camel Case; Consistency Between Resources; Booleans; Timestamps; ISO 8601; JavaScript Default; Unix Epoch; SQL Timestamp; Resource Identifiers (IDs) NullsArrays; Whitespace; Error Reporting; Validation Errors; Generic Errors; Always Handle Server Errors; String-Based Error Codes; Responses Should Mimic Requests; Acceptable Discrepancy; Avoidable Discrepancy; HTTP Headers; API Standards; Simple Response Envelope; JSON Schema; JSON API; GraphQL; Hypermedia APIs; API Transports; JSON RPC; SOAP; MessagePack (Binary); Apache Thrift (Binary); Chapter 3: Deployments; Automated Testing; Unit Tests; Smoke Tests; Integration Tests; Acceptance Tests; Performance Tests; Regression Tests; Containers; Docker Containers; Dockerfile Breakdown Running a Docker ImageManaging Containers with Kubernetes; Further Reading: Mesos and Marathon; Build Pipeline; Continuous Integration and Deployment; Choosing Environments; Designing a Build Pipeline; Building with Jenkins; Testing Contributions; Jenkins; Travis CI; Further Reading: TeamCity and CircleCI; Chapter 4: Service Discovery; Why Do You Need Service Discovery?; Client Side vs. Server Side; Client-Side Discovery; Server-Side Discovery; Example Implementation; Get Entire State; Register Provider Instance; Deregister Provider Instance; Finding a Provider},
author = {Hunter, Thomas},
booktitle = {Advanced Microservices: A Hands-on Approach to Microservice Infrastructure and Tooling},
doi = {10.1007/978-1-4842-2887-6},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hunter - 2017 - Advanced Microservices A Hands-on Approach to Microservice Infrastructure and Tooling.pdf:pdf},
isbn = {9781484228876},
pages = {1--181},
title = {{Advanced Microservices: A Hands-on Approach to Microservice Infrastructure and Tooling}},
year = {2017}
}
@article{Mompo2017,
author = {Momp{\'{o}}, {\'{A}}lvaron},
file = {:D$\backslash$:/INFORMATICA/8{\textordmasculine}SEMESTRE/TFGs - Base/MOMP{\'{O}} - Estudio de sistema de control de versiones y uso de los mismos en proyectos de integraci{\'{o}}....pdf:pdf},
institution = {Universitat Polit{\'{e}}cnica de Valencia},
journal = {Universitat Polit{\'{e}}cnica de Valencia},
title = {{Estudio de sistema de control de versiones y uso de los mismos en proyectos de integraci{\'{o}}n continua}},
year = {2017}
}
@misc{McClure2015,
annote = {Consultado el d{\'{i}}a 01/08/2018.},
author = {McClure, Wallace},
booktitle = {Visual Studio Magazine},
title = {{Native Services with Xamarin.Forms? It's DependencyService to the Rescue}},
url = {https://visualstudiomagazine.com/articles/2015/09/01/native-services-with-xamarinforms.aspx},
urldate = {2018-09-08},
year = {2015}
}
@article{Ameller2013,
abstract = {A survey of software architects addressed how they face non-functional requirements from an engineering perspective and how these requirements influence decision making.},
author = {Ameller, David and Ayala, Claudia and Cabot, Jordi and Franch, Xavier},
doi = {10.1109/MS.2012.176},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ameller et al. - 2013 - Non-functional Requirements in Architectural Decision Making.pdf:pdf},
isbn = {07407459},
issn = {0740-7459},
journal = {IEEE Software},
keywords = {NFR,architectural decisions,non-functional requirements,nonfunctional requirements,quality requirements,software architecturecontent type,software engineering},
month = {mar},
number = {2},
pages = {61--67},
title = {{Non-functional Requirements in Architectural Decision Making}},
volume = {30},
year = {2013}
}
@book{Mazzara2017,
abstract = {Microservices: Yesterday, Today, and Tomorrow Microservices is an architectural style inspired by service-oriented com- puting that has recently started gaining popularity. Before presenting the current state of the art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out a few potential solutions.},
archivePrefix = {arXiv},
arxivId = {arXiv:1606.04036v4},
author = {Mazzara, Manuel and Meyer, Betrand},
doi = {10.1007/978-3-319-67425-4},
eprint = {arXiv:1606.04036v4},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2017 - Present and Ulterior Software Engineering.pdf:pdf},
isbn = {978-3-319-67424-7},
pages = {195--212},
title = {{Present and Ulterior Software Engineering}},
year = {2017}
}
@article{Gilbert2012,
abstract = {The CAP theorem is one example of a more general tradeoff between safety and liveness in unreliable systems. Viewing CAP in this context provides insight into the inherent tradeoffs and the manner in which they can be circumvented in practice.},
author = {Gilbert, Seth and Lynch, Nancy},
doi = {10.1109/MC.2011.389},
isbn = {0018-9162},
issn = {0018-9162},
journal = {Computer},
month = {feb},
number = {2},
pages = {30--36},
pmid = {6122006},
title = {{Perspectives on the CAP Theorem}},
volume = {45},
year = {2012}
}
@misc{Fowler2013,
annote = {Consultado el d{\'{i}}a 27/07/2018.},
author = {Fowler, Martin},
title = {{ContinuousDelivery}},
url = {https://martinfowler.com/bliki/ContinuousDelivery.html},
urldate = {2018-07-27},
year = {2013}
}
@misc{Fowler2006,
annote = {Consultado el d{\'{i}}a 27/07/2018.},
author = {Fowler, Martin},
title = {{Continuous Integration}},
url = {https://martinfowler.com/articles/continuousIntegration.html},
urldate = {2018-07-27},
year = {2006}
}
@misc{Net21,
annote = {Consultado el d{\'{i}}a 29/07/2018.},
booktitle = {Microsoft},
title = {{.NET Core 2.1 downloads for Linux, macOS, and Windows}},
url = {https://www.microsoft.com/net/download/dotnet-core/2.1},
urldate = {2018-09-08}
}
@misc{Lewis2014,
annote = {Consultado el d{\'{i}}a 08/07/2018.},
author = {Lewis, James and Fowler, Martin},
title = {{Microservices}},
url = {https://www.martinfowler.com/articles/microservices.html},
urldate = {2018-07-08},
year = {2014}
}
@techreport{Mulligan,
abstract = {This paper describes the conceptual design of an interaction independence middleware framework and describes the role that web services plays within it. We investigate two pervasive service-oriented architecture paradigms, SOAP and REST, in order to gauge their potential effectiveness in meeting underlying back-end data transmission requirements; provide implementations for the service-oriented architecture and data model; and, finally, critically evaluate both implementations with an emphasis on their performance with regard to both efficiency and scalability.},
author = {Mulligan, Gavin and Gra{\v{c}}anin, Denis},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mulligan, Gra{\v{c}}anin - Unknown - A COMPARISON OF SOAP AND REST IMPLEMENTATIONS OF A SERVICE BASED INTERACTION INDEPENDENCE MIDDLEWARE FRAM.pdf:pdf},
title = {{A comparison of SOAP and REST implementations of a service bases interaction independence middleware framework}},
year = {2009}
}
@book{DelaTorre2018,
abstract = {Reservados todos los derechos. No se puede reproducir ni transmitir de ninguna forma, ni por ning{\'{u}}n medio, ninguna parte del contenido de este libro, sin la autorizaci{\'{o}}n por escrito del editor. Este libro se proporciona "tal cual" y expresa los puntos de vista y opiniones de los autores. Los puntos de vista, opiniones e informaci{\'{o}}n expresada en este libro, incluyendo las URL y otras referencias a sitios web de Internet, pueden cambiar sin previo aviso. Algunos ejemplos mostrados aqu{\'{i}} se proporcionan s{\'{o}}lo a t{\'{i}}tulo ilustrativo y son ficticios. No se pretende ni se debe inferir ninguna conexi{\'{o}}n ni asociaciaci{\'{o}}n con la realidad. Microsoft y las marcas que figuran en la p{\'{a}}gina web de "Trademarks" en http://www.microsoft.com, son marcas comerciales del grupo de compa{\~{n}}{\'{i}}as de Microsoft. Mac y macOS son marcas de Apple Inc. El logotipo de la ballena de Docker es una marca registrada de Docker, Inc. Se usa con la autorizaci{\'{o}}n correspondiente. Todas las otras marcas y logotipos son propiedad de sus respectivos due{\~{n}}os.},
author = {{De la Torre}, Cesar and Wagner, Bill and Rousos, Mike},
edition = {2},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/De la Torre, Wagner, Rousos - 2018 - Microservicios .NET Arquitectura para Aplicaciones .NET Contenerizadas.pdf:pdf},
publisher = {Microsoft Corporation},
title = {{Microservicios .NET: Arquitectura para Aplicaciones .NET Contenerizadas}},
year = {2018}
}
@misc{Eaves2014,
annote = {Consultado el d{\'{i}}a 09/08/2018.},
author = {Eaves, Jon},
booktitle = {REA Group Tech Blog},
title = {{Micro services, what even are they?}},
url = {http://rea.tech/micro-services-what-even-are-they/},
urldate = {2018-08-09},
year = {2014}
}
@misc{CodeFirst,
annote = {Consultado el d{\'{i}}a 01/08/2018.},
booktitle = {Entity Framework Tutorial},
title = {{What is Code-First?}},
url = {http://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx},
urldate = {2018-09-08}
}
@article{DeAlfonso2017,
abstract = {eScience demands large-scale computing clusters to support the efficient execution of resource-intensive scientific applications. Virtual Machines (VMs) have introduced the ability to provide customizable execution environments, at the expense of performance loss for applications. However, in recent years, containers have emerged as a light-weight virtualization technology compared to VMs. Indeed, the usage of containers for virtual clusters allows better performance for the applications and fast deployment of additional working nodes, for enhanced elasticity. This paper focuses on the deployment, configuration and management of Virtual Elastic computer Clusters (VEC) dedicated to process scientific workloads. The nodes of the scientific cluster are hosted in containers running on bare-metal machines. The open-source tool Elastic Cluster for Docker (EC4Docker) is introduced, integrated with Docker Swarm to create auto-scaled virtual computer clusters of containers across distributed deployments. We also discuss the benefits and limitations of this solution and analyse the performance of the developed tools under a real scenario by means of a scientific use case that demonstrates the feasibility of the proposed approach.},
author = {de Alfonso, Carlos and Calatrava, Amanda and Molt{\'{o}}, Germ{\'{a}}n},
doi = {10.1016/j.jss.2017.01.007},
file = {:D$\backslash$:/INFORMATICA/8{\textordmasculine}SEMESTRE/TFG - Docs/Pendiente/Molto.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Cluster computing,Computing,Containers,Elasticity},
pages = {1--11},
title = {{Container-based virtual elastic clusters}},
volume = {127},
year = {2017}
}
@book{Martin2017,
abstract = {Building upon the success of best-sellers The Clean Coder and Clean Code, legendary software craftsman Robert C. "Uncle Bob" Martin shows how to bring greater professionalism and discipline to application architecture and design. As with his other books, Martin's Clean Architecture doesn't merely present multiple choices and options, and say "use your best judgment": it tells you what choices to make, and why those choices are critical to your success. Martin offers direct, no-nonsense answers to key architecture and design questions like: What are the best high level structures for different kinds of applications, including web, database, thick-client, console, and embedded apps? What are the core principles of software architecture? What is the role of the architect, and what is he/she really trying to achieve? What are the core principles of software design? How do designs and architectures go wrong, and what can you do about it? What are the disciplines and practices of professional architects and designers? Clean Architecture is essential reading for every software architect, systems analyst, system designer, and software manager -- and for any programmer who aspires to these roles or is impacted by their work.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Martin, Robert C.},
doi = {10.1177/1356389011400889},
eprint = {arXiv:1011.1669v3},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Martin - 2017 - Clean Architecture A Craftsman's Guide to Software Structure and Design.pdf:pdf},
isbn = {978-0134494166},
issn = {13563890},
pages = {30--45},
pmid = {15991970},
publisher = {Prentice Hall},
title = {{Clean Architecture: A Craftsman's Guide to Software Structure and Design}},
year = {2017}
}
@misc{Gilling2018,
annote = {Consultado el d{\'{i}}a 25/07/2018.},
author = {Gilling, Derric},
booktitle = {Moesif's Musings on Software},
title = {{REST API Design: Filtering, Sorting, and Pagination}},
url = {https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/},
urldate = {2018-09-08},
year = {2018}
}
@misc{Fowler,
annote = {Consultado el d{\'{i}}a 25/07/2018.},
author = {Fowler, Martin},
title = {{BoundedContext}},
url = {https://martinfowler.com/bliki/BoundedContext.html},
urldate = {2018-07-25},
year = {2014}
}
@book{FowlerSusan,
author = {Fowler, Susan J.},
file = {:D$\backslash$:/TFG/Books/Microservicios/Microservices-in-Production.pdf:pdf},
publisher = {O'REILLY},
title = {{Microservices in Production : Standard Principles and Requirements}},
year = {2017}
}
@inproceedings{Brewer2000,
address = {Portland, Oregon},
author = {Brewer, Eric A},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Brewer - 2000 - Towards Robust Towards Robust Distributed Systems Distributed Systems Inktomi at a Glance Inktomi at a Glance Company Ov.pdf:pdf},
publisher = {Nineteenth ACM Symposium on Principles of Distributed Computing},
title = {{Towards Robust Towards Robust Distributed Systems Distributed Systems}},
url = {https://people.eecs.berkeley.edu/{~}brewer/cs262b-2004/PODC-keynote.pdf},
year = {2000}
}
@book{IEEECOMPUTERSOCIETY2004,
author = {{IEEE COMPUTER SOCIETY}},
booktitle = {IEEE Computer Society},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2004 - GU{\'{I}}A AL CUERPO DE CONOCIMIENTO DE LA INGENIER{\'{I}}A DEL SOFTWARE VERSI{\'{O}}N 2004 SWEBOK UN PROYECTO DEL COMIT{\'{E}} DE LA PR{\'{A}}CTICA.pdf:pdf},
isbn = {0769523307},
keywords = {Ingenier{\'{i}}a de Software},
pages = {215},
title = {{Swebok - Gu{\'{i}}a al cuerpo de conocimiento de la Ingenier{\'{i}}a de Software}},
url = {http://shop.ieee.org/store/customer-},
year = {2004}
}
@book{Vliet2011,
abstract = {1st ed. If you plan to use Amazon Web Services to run applications in the cloud, the end-to-end approach in this book will save you needless trial and error. You'll find practical guidelines for designing and building applications with Amazon Elastic Compute Cloud (EC2) and a host of supporting AWS tools, with a focus on critical issues such as load balancing, monitoring, and automation. How do you move an existing application to AWS, or design your application so that it scales effectively? How much storage will you require? Programming Amazon EC2 not only helps you get started, it will also keep y. Foreword -- Preface -- Introducing AWS -- Starting with EC2,RDS, and S3/CloudFront --Growing with S3, ELB, Auto Scaling, and RDS -- Decoupling with SQS, SimpleDB, and SNS -- Managing the inevitable downtime -- Improving your uptime -- Managing your decoupled system -- And now -- Index.},
author = {van. Vliet, Jurg and Paganelli, Flavia.},
isbn = {1449305261},
pages = {163},
publisher = {O'REILLY},
title = {{Programming Amazon EC2}},
year = {2011}
}
@book{Newman2015a,
abstract = {Distributed systems have become more fine-grained in the past 10 years, shifting from code-heavy monolithic applications to smaller, self-contained microservices. But developing these systems brings its own set of headaches. With lots of examples and practical advice, this book takes a holistic view of the topics that system architects and administrators must consider when building, managing, and evolving microservice architectures.Microservice technologies are moving quickly. Author Sam Newman provides you with a firm grounding in the concepts while diving into current solutions for modeling, integrating, testing, deploying, and monitoring your own autonomous services. You'll follow a fictional company throughout the book to learn how building a microservice architecture affects a single domain.Discover how microservices allow you to align your system design with your organization's goalsLearn options for integrating a service with the rest of your systemTake an incremental approach when splitting monolithic codebasesDeploy individual microservices through continuous integrationExamine the complexities of testing and monitoring distributed servicesManage security with user-to-service and service-to-service modelsUnderstand the challenges of scaling microservice architectures},
archivePrefix = {arXiv},
arxivId = {1606.04036},
author = {Newman, Sam},
booktitle = {O'Reilly},
doi = {10.1109/MS.2016.64},
eprint = {1606.04036},
isbn = {978-1-491-95035-7},
issn = {07407459},
keywords = {www.it-ebooks.info},
pmid = {15003161},
publisher = {O'REILLY},
title = {{Building Microservices}},
year = {2015}
}
@book{Pressman,
abstract = {Eighth edition. A guide to software engineering. It focuses on widely used software engineering methods and will de-emphasize or completely eliminate discussion of secondary methods, tools and techniques. 1. The nature of software -- 2. Software engineering -- 3. Software process structure -- 4. Process models -- 5. Agile development -- 6. Human aspects of software engineering -- 7. Principles that guide practice -- 8. Understanding requirements -- 9. Requirements modeling: scenario-based methods -- 10. Requirements modeling: class-based methods -- 11. Requirements modeling: behavior, patterens, and web / mobile apps -- 12. Design concepts -- 13. Architectural desigtn -- 14. Component-level design -- 15. User interface design -- 16. Pattern-based design -- 17. Web-app design -- 18 Mobile-app design -- 19. Quality concepts -- 20. Review techniques -- 21. Software quality assurance -- 22. Software testing strategies -- 23. Testing conventional applications -- 24. Testing object-oriented applications -- 25. Testing web applications -- 26. Testing moble applications -- 27. Security engineering -- 28. Formal modeling and verification -- 29. Software configuration management -- 30. Product metrics.},
author = {Pressman, Roger S.},
edition = {7},
isbn = {0078022126},
pages = {761--768},
title = {{Software engineering : a practitioner's approach}},
year = {2010}
}
@book{Matthias,
author = {Matthias, Karl and Kane, Sean P},
file = {:D$\backslash$:/TFG/Books/Microservicios/Docker - Up {\&} Running.pdf:pdf},
isbn = {9781491917572},
keywords = {www.finebook.ir},
publisher = {O'REILLY},
title = {{Docker Up {\&} Running}},
year = {2015}
}
@misc{Fowler2011,
annote = {Consultado el d{\'{i}}a 26/07/2018.},
author = {Fowler, Martin},
title = {{PolyglotPersistence}},
url = {https://martinfowler.com/bliki/PolyglotPersistence.html},
urldate = {2018-07-26},
year = {2011}
}
@article{Qaisi2016,
abstract = {The rapid revolution of Social Network Sites (SNS) around the globe is presenting wide range of data that can be used in studies of sentiment analysis about certain products, brands, services ... etc. In addition, cloud computing fields had been one of the most interesting fields in research studies. In this paper, we used the sentiment analysis of top leading cloud service providers namely; Amazon and Microsoft Azure to analyse their customers' opinions and reviews. To do that, two datasets are extracted which are consisting of tweets that had either organizations' names or cloud names. We study, and analyze the way customers think about them. In this regard, many organizations tend to find out what do customers think or tweet about their products in order to effectively plan marketing campaigns and try to gain the positive impact ofWord-of-Mouth. Results are analyzed and explained in details in term of polarity and emotions classifications to show the impact of sentiment analysis to support organizations decisions. We can note from the emotions classification results that, "joy" category is better for Microsoft Azure comparing to Amazon, The "sadness" percentage is larger for Amazon comparing to Microsoft Azure. Furthermore, we can note from the polarity classification that Microsoft Azure has 65{\%} positive tweets compared 45{\%} for Amazon. In addition, the results show that Amazon has 50{\%} negative polarity compared 25{\%} for Microsoft Azure.},
author = {Qaisi, Laila M and Aljarah, Ibrahim},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/Downloads/07549473.pdf:pdf},
isbn = {9781467389136},
keywords = {- social network analysis,amazon web services,aws,cloud computing,microsoft azure,sentiment analysis,sna},
pages = {1--6},
title = {{A Twitter Sentiment Analysis for Cloud Providers: A Case Study of Azure vs. AWS}},
year = {2016}
}
@article{Roig2017,
author = {Roig, Tom{\'{a}}s},
file = {:D$\backslash$:/INFORMATICA/8{\textordmasculine}SEMESTRE/TFGs - Base/ROIG - Administrador de la plataforma LXC.pdf:pdf},
institution = {Universitat Polit{\'{e}}cnica de Valencia},
journal = {Universitat Polit{\'{e}}cnica de Valencia},
title = {{LXC platform manager}},
year = {2017}
}
@book{Rensin2015,
author = {Rensin, David},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Rensin - 2015 - Kubernetes.pdf:pdf},
publisher = {O'REILLY},
title = {{Kubernetes}},
year = {2015}
}
@book{Fernandes2016,
author = {Fernandes, Jo{\~{a}}o M. and Machado, Ricardo J.},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Fernandes, Machado - 2016 - Requirements in Engineeng Projects.pdf:pdf},
isbn = {9783319185972},
publisher = {Springer},
title = {{Requirements in Engineeng Projects}},
year = {2016}
}
@article{Arsanjani2009a,
abstract = {Tracking the fate of cells in murine epidermis in vivo has revealed that a committed progenitor cell population can maintain normal adult tissue in the long term without support from a long-lived, self-renewing population of stem cells. Here, we argue that these results challenge the dogma that stem-cell proliferation is required for the cellular homeostasis of the epidermis and other adult tissues, with important implications for tissue physiology and disease.},
author = {Arsanjani, Ali and Booch, Grady and Boubez, Toufic and Brown, Paul C. and Chappell, David and DeVadoss, John and {Thomas Erl} and Josuttis, Nicolai and Krafzig, Dirk and Little, Mark and Loesgen, Brian and Manes, Anne Thomas and {Joe McKendrick} and Ross-Talbot, Steve and Tilkov, Stefan and Utschig-Utschig, Clemens and Wilhelmsen, Herbj{\"{o}}rn},
title = {{Manifiesto SOA}},
year = {2009}
}
@book{Cohn2010,
author = {Cohn, Mike},
isbn = {9780321660534},
pages = {475},
publisher = {Addison-Wesley},
title = {{Succeeding with agile : software development using Scrum}},
year = {2010}
}
@misc{Datadog2018,
annote = {Consultado el d{\'{i}}a 31/08/2018.},
author = {Datadog},
title = {{8 surprising facts about real Docker adoption}},
url = {https://www.datadoghq.com/docker-adoption/},
urldate = {2018-09-08},
year = {2018}
}
@misc{Wikipedia,
annote = {Consultado el d{\'{i}}a 07/07/2018.},
author = {Wikipedia},
title = {{Service (systems architecture)}},
url = {https://en.wikipedia.org/wiki/Service{\_}(systems{\_}architecture)},
urldate = {2018-07-07},
year = {2007}
}
@misc{Ryan2016,
annote = {Consultado el d{\'{i}}a 30/08/2018.},
author = {Ryan, Fintan},
booktitle = {RedMonk},
title = {{Container Trends: Plans, Orchestration and CI – A Dataset from Bitnami – Charting Stacks}},
url = {https://redmonk.com/fryan/2016/06/21/container-trends-plans-orchestration-and-ci-a-dataset-from-bitnami/},
urldate = {2018-09-08},
year = {2016}
}
@article{Dua2014,
abstract = {—PaaS vendors face challenges in efficiently providing services with the growth of their offerings. In this paper, we explore how PaaS vendors are using containers as a means of hosting Apps. The paper starts with a discussion of PaaS Use case and the current adoption of Container based PaaS archi- tectures with the existing vendors. We explore various container implementations - Linux Containers, Docker, Warden Container, lmctfy and OpenVZ.We look at how each of this implementation handle Process, FileSystem and Namespace isolation. We look at some of the unique features of each container and how some of them reuse base Linux Container implementation or differ from it. We also explore how IaaSlayer itself has started providing support for container lifecycle management along with Virtual Machines. In the end, we look at factors affecting container implementation choices and some of the features missing from the existing implementations for the next generation PaaS.},
archivePrefix = {arXiv},
arxivId = {0521865719 9780521865715},
author = {Dua, Rajdeep and Raja, A. Reddy and Kakadia, Dharmesh},
doi = {10.1109/IC2E.2014.41},
eprint = {0521865719 9780521865715},
file = {:D$\backslash$:/TFG/TFG{\_}Microservices/Docs{\_}Bibliograf{\'{i}}a/Virtulization{\_}vs{\_}Containers.pdf:pdf},
isbn = {9781479937660},
issn = {2373-3845},
journal = {Proceedings - 2014 IEEE International Conference on Cloud Engineering, IC2E 2014},
keywords = {container,paas,virtualization},
pmid = {11242594},
title = {{Virtualization vs containerization to support PaaS}},
year = {2014}
}
@misc{NetCore21,
title = {{.NET Core 2.1 versions}},
url = {https://www.microsoft.com/net/download/dotnet-core/2.1},
urldate = {2018-07-29},
year = {2018}
}
@article{Conway1968,
abstract = {Author's note 33 years after publication: Perhaps this paper's most remarkable feature is that it made it to publication with its thesis statement in the third-last paragraph. To save you the trouble of wading through 45 paragraphs to find the thesis, I'll give it to you now: Any organization which designs a system (defined more broadly here than just information systems) will inevitably produce a design whose structure is a copy of the organization's communication structure. This turns out to be a principle with much broader utility than software project management, where references to it usually occur. I invite you to read the paper, then look around to find applications. My current favorite is the complex of social issues encompassing welfare, access to labor markets, housing, education, and drugs. After reading the paper, think about how the structures of our Governments affect their approaches to this system.},
author = {Conway, Melvin E},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Conway - Unknown - HOW DO COMMITTEES INVENT.pdf:pdf},
issn = {00116963},
journal = {Datamation},
keywords = {social-factors software-engineering},
number = {4},
pages = {28--31},
title = {{How do committees invent}},
volume = {14},
year = {1968}
}
@misc{Chiarelli2017,
author = {Chiarelli, Andrea},
title = {{Securing ASP.NET Core 2.0 Applications with JWTs}},
url = {https://auth0.com/blog/securing-asp-dot-net-core-2-applications-with-jwts/},
urldate = {2018-07-30},
year = {2017}
}
@misc{Baum2016,
annote = {Consultado el d{\'{i}}a 06/08/2018.},
author = {Baum, Vitaly},
title = {{Practical Microservices: Correlation Tokens – Microservices Practitioner Articles}},
url = {https://articles.microservices.com/practical-microservices-correlation-tokens-75888baa5182},
urldate = {2018-08-06},
year = {2016}
}
@book{Richards2016,
author = {Richards, Mark},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Richards - 2016 - Microservices AntiPatterns and Pitfalls.pdf:pdf},
publisher = {O'REILLY},
title = {{Microservices AntiPatterns and Pitfalls}},
year = {2016}
}
@misc{Roberts2017,
annote = {Consultado el d{\'{i}}a 05/08/2018.},
author = {Roberts, Jason},
booktitle = {Visual Studio Magazine},
title = {{In-Memory ASP.NET Core Integration Tests with TestServer}},
url = {https://visualstudiomagazine.com/articles/2017/07/01/testserver.aspx},
urldate = {2018-09-08},
year = {2017}
}
@book{Sommerville2010,
abstract = {The book presents a broad perspective on software systems engineering, concentrating on widely used techniques for developing large-scale systems. Building on the widely acclaimed strengths of the 8th edition, the 9th edition updates readers with the latest developments in the field while remaining the most current Software Engineering text in the market with quality trusted coverage and practical case studies. This text is structured into 6 parts: Introduction; Requirements Engineering; Design; Software Development; Verification and Validation; Management. An up-to-date reference for software engineers.},
archivePrefix = {arXiv},
arxivId = {0321313798},
author = {Sommerville, Ian},
booktitle = {Software Engineering},
doi = {10.1111/j.1365-2362.2005.01463.x},
edition = {9},
eprint = {0321313798},
file = {:D$\backslash$:/TFG/Books/Software{\_}Engineering/1429431793.203Software Engineering by Somerville.pdf:pdf},
isbn = {9780137035151},
issn = {0014-2972},
pages = {234--260},
pmid = {15667577},
title = {{Software Engineering}},
year = {2010}
}
@book{Bourque2014,
abstract = {SWEBOK V3.0 is the most recent completely revised and updated version of the internationally respected Guide to the Software Engineering Body of Knowledge. Newly imagined as a living, changing document, and thoroughly rewritten, SWEBOK V3.0 has been developed and created by leading authorities, reviewed by professionals, and made available for public review and comment, continuing its 20-year reputation as the most authoritative, fundamental, and trusted definition of the software engineering profession. SWEBOK V3.0 is comprised of 15 Knowledge Areas, plus a new Appendix on Standards. SWEBOK V3.0 is now specifically designed to be constantly reviewed and updated as technology and the engineering profession changes over time, remaining consistently relevant. Be sure to register to receive notifications when the SWEBOK Guide is revised.},
archivePrefix = {arXiv},
arxivId = {arXiv:1210.1833v2},
author = {SOCIETY, IEEE COMPUTER},
booktitle = {IEEE Computer Society},
doi = {10.1234/12345678},
editor = {Bourque, Pierre and Fairley, Richard E.},
eprint = {arXiv:1210.1833v2},
file = {:C$\backslash$:/Users/V{\'{i}}ctor/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Guide to the Software Engineering Body of Knowledge SWEBOK {\textregistered} A Project of the IEEE Computer Society.pdf:pdf},
isbn = {0-7695-2330-7},
issn = {07407459},
pages = {346},
pmid = {13861254},
title = {{Guide to the Software Engineering - Body of Knowledge.}},
year = {2014}
}
@misc{Shubham2018,
annote = {Consultado el d{\'{i}}a 03/07/2018.},
author = {Shubham, A},
booktitle = {JournalDev},
title = {{DAO Design Pattern}},
url = {https://www.journaldev.com/16813/dao-design-pattern},
urldate = {2018-09-08},
year = {2018}
}
